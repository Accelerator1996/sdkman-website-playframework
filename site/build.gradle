import com.yahoo.platform.yui.compressor.CssCompressor
import com.yahoo.platform.yui.compressor.JavaScriptCompressor
import org.apache.tools.ant.filters.BaseFilterReader

ext.watchmode = project.hasProperty('watchmode')?project.getProperty('watchmode'):'false'

apply plugin: 'base'
apply plugin: 'org.kordamp.gradle.livereload'

task copyAssets(type:Copy) {
    from file('src/site/assets')
    into file("$buildDir/site")
    filesMatching('**/*.css') { f->
        if (!f.name.contains('.min.')) {
            filter(CssFilter)
        }
    }
    filesMatching('**/*.js') { f->
        if (!f.name.contains('.min.')) {
            filter(JsFilter)
        }
    }
}

task copyCname(type:Copy) {
    from file('src/site/CNAME')
    into file("$buildDir/site")
}

task generateSite(type:JavaExec) {

    description = 'Generates the Groovy Website'
    dependsOn copyAssets, copyCname

    ext.sources = file('src/site')
    ext.outputDir = file("$buildDir/site")

    inputs.files fileTree(sources)
    outputs.files fileTree(outputDir)

    classpath = project(':generator').sourceSets.main.runtimeClasspath
    main = 'generator.SiteGenerator'
    args = [sources, outputDir, project.watchmode]
    systemProperties.docs_baseurl = System.getProperty('docs_baseurl')
}

task webzip(type:Zip, dependsOn: generateSite) {
    description = "Creates a zip with the generated website and the deadlink report"
    destinationDir = file("$buildDir/distributions")

    baseName = 'sdkman'
    appendix = 'website'
    from(generateSite.outputDir) {
        into '.'
    }
}

// Resource filtering classes

class JsFilter extends BaseFilterReader {
    Writer writer
    Thread worker

    JsFilter(Reader reader) {
        super(new PipedReader())
        writer = new PipedWriter(this.@in)
        def compressor = new JavaScriptCompressor(reader, null)
        reader.close()
        worker = Thread.start {
            compressor.compress(writer, -1, true, false, false, false)
            writer.close()
        }
    }

    void close() {
        worker.join()
        super.close()
    }

}

class CssFilter extends BaseFilterReader {
    Writer writer
    Thread worker

    CssFilter(Reader reader) {
        super(new PipedReader())
        writer = new PipedWriter(this.@in)
        def compressor = new CssCompressor(reader)
        reader.close()
        worker = Thread.start {
            compressor.compress(writer, -1)
            writer.close()
        }
    }

    void close() {
        worker.join()
        super.close()
    }

}

liveReload {
    docRoot "$buildDir/site"
}
