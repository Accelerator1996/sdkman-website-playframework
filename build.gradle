import groovy.text.markup.MarkupTemplateEngine
import groovy.text.markup.TemplateConfiguration
import org.gradle.logging.ConsoleRenderer

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.codehaus.groovy:groovy:2.3.3'
        classpath 'org.codehaus.groovy:groovy-templates:2.3.3'
    }
}

apply plugin:'groovy'

// The following dependencies are only used for IDE support
// because libraries from buildscript do not appear on classpath :(
// -----------------------------------------------------------------
repositories {
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy:2.3.3'
    compile 'org.codehaus.groovy:groovy-templates:2.3.3'
}
// -----------------------------------------------------------------

task copyAssets(type:Copy) {
    from file('src/site/assets')
    into file("$buildDir/site")
}

task generateSite(dependsOn: copyAssets) {

    description = 'Generates the Groovy Website'

    ext.sources = file('src/site')
    ext.outputDir = file("$buildDir/site")
    ext.sitemapFile = file('sitemap.groovy')

    inputs.files fileTree(sources)
    inputs.file sitemapFile
    outputs.files fileTree(outputDir)

    doLast {
        def tplConf = new TemplateConfiguration()
        tplConf.with {
            autoIndent = true
            autoNewLine = true
        }
        def tplEngine = new MarkupTemplateEngine(this.class.classLoader, sources, tplConf)

        def siteMap = SiteMap.from(sitemapFile)

        def render = { String page, String target = null, Map model = [:] ->
            model.menu = siteMap.menu
            target = target ?: page
            file("$outputDir/${target}.html").write(tplEngine.createTemplateByPath("pages/${page}.groovy").make(model).toString(), 'utf-8')
        }


        render 'index', 'index', [allEvents: siteMap.allEvents]
        render 'ecosystem', 'ecosystem', [category: 'Ecosystem', ecosys: siteMap.ecosystem]
        render 'learn', 'learn', [category: 'Learn', docSections: siteMap.documentationSections]
        render 'documentation', 'documentation', [category: 'Documentation', docSections: siteMap.documentationSections]

        siteMap.documentationSections.each { Section section ->
            section.items.each { SectionItem item ->
                logger.info("Generating documentation page [$item.name]")
                render 'docpage', item.targetFilename, [category: 'Learn', title: item.name, iframeTarget: "http://docs.groovy-lang.org/docs/next/html/documentation/${item.sourceFilename}.html"]
            }
        }

        render 'download', 'download', [category: 'Download', distributions: siteMap.distributions]
        render 'versioning', 'versioning', [category: 'Download']
        render 'indy', 'indy', [category: 'Download']
        render 'community', 'community', [category: 'Community']
        render 'groovyweekly', 'groovy-weekly', [category: 'Community']
        render 'mailinglists', 'mailing-lists', [category: 'Community']
        render 'contribute', 'contribute', [category: 'Community']
        render 'faq', 'faq', [category: 'Documentation', docSections: siteMap.documentationSections]
        render 'events', 'events', [category: 'Community', allEvents: siteMap.allEvents]
        render 'api', 'api', [category: 'Learn', iframeTarget: 'http://docs.groovy-lang.org/docs/next/html/gapi']
        render 'gdk', 'gdk', [category: 'Learn', iframeTarget: 'http://docs.groovy-lang.org/docs/next/html/groovy-jdk']
        render 'singlepagedocumentation', 'single-page-documentation', [category: 'Learn', iframeTarget: 'http://docs.groovy-lang.org/docs/next/html/documentation/']
    }
}

task checkDeadLinks(dependsOn: generateSite) {
    description = "Checks for dead links in the generated Groovy website"

    ext.outputDir = file("$buildDir/reports")
    ext.reportFile = file("$outputDir/deadlinks.html")

    inputs.files fileTree(generateSite.outputDir)
    outputs.file reportFile

    doLast {
        def deadLinks = [:]

        def isDead = [:].withDefault { String link ->
            try {
                URL url
                try {
                    url = URI.create(link).toURL()
                } catch (e) {
                    if (e.message.contains('URI is not absolute')) {
                        url = URI.create("file://${file("${generateSite.outputDir}/$link")}").toURL()
                    }
                }
                def stream = url.openStream()
                stream.close()
            } catch (e) {
                if (link.startsWith('https')) {
                    // workaround to be found
                    return false
                }
                return true
            }
            return false
        }

        def checkLink = { List dead, int line, String link ->
            if (isDead[link]) {
                dead << "at line $line: $link"
            }
        }

        def checkPage = { File f ->
            f.eachLine('utf-8') { String line, int nb ->
                def dead = []
                [/href=['"](.+?)['"]/, /src=['"](.+?)['"]/].each { regex ->
                    def matcher = line =~ regex
                    if (matcher) {
                        matcher.each {
                            checkLink(dead, nb, it[1])
                        }
                    }
                }
                if (dead) {
                    deadLinks[f] = dead
                }
            }
        }

        file(generateSite.outputDir).eachFileRecurse {
            if (it.name.endsWith('.html')) {
                checkPage(it)
            }
        }

        outputDir.mkdirs()
        def tplConf = new TemplateConfiguration()
        tplConf.with {
            autoIndent = true
            autoNewLine = true
        }
        def tplEngine = new MarkupTemplateEngine(this.class.classLoader, file('gradle/templates'), tplConf)

        def report = tplEngine.createTemplateByPath("deadlinks.groovy").make(deadLinks: deadLinks).toString()

        reportFile.write(report, 'utf-8')
        def reportURL = new ConsoleRenderer().asClickableFileUrl(reportFile)
        logger.lifecycle "Dead links report written at $reportURL"
    }
}

task webzip(type:Zip, dependsOn: checkDeadLinks) {
    description = "Creates a zip with the generated website and the deadlink report"

    baseName = 'groovy'
    appendix = 'website'
    from(generateSite.outputDir) {
        into 'site'
    }
    from (checkDeadLinks.outputDir) {
        into 'reports'
    }
}