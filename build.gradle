import play.japi.twirl.compiler.TwirlCompiler

buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    jcenter()
  }
  dependencies {
    classpath "io.ratpack:ratpack-gradle:1.5.1"
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    classpath "com.netflix.nebula:nebula-release-plugin:6.3.3"
    classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2"
    classpath 'org.scala-lang:scala-library:2.12.5'
    classpath 'org.scala-lang.modules:scala-parser-combinators_2.12:1.1.0'
    classpath 'com.typesafe.play:twirl-compiler_2.12:1.3.13'
    classpath 'com.typesafe.play:twirl-api_2.12:1.3.13'
  }
}

apply plugin: "scala"
apply plugin: "io.ratpack.ratpack-java"
apply plugin: "nebula.release"
apply plugin: "com.palantir.docker"

mainClassName = "io.sdkman.site.SiteMain"
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
  jcenter()
}

configurations {
  generatedCompile
}

dependencies {
  compile 'org.scala-lang:scala-library:2.12.4'
  compile ratpack.dependency("guice")
  compile 'ch.qos.logback:logback-classic:1.2.3'
  compile 'com.typesafe.scala-logging:scala-logging_2.12:3.7.2'
  compile 'ch.lightshed:courier_2.12:0.1.4'
  compile 'com.typesafe:config:1.3.1'
  compile 'io.sdkman:sdkman-mongodb-persistence_2.12:0.9'
  compile 'com.typesafe.play:twirl-api_2.12:1.3.13'
  compile 'com.typesafe.play:twirl-compiler_2.12:1.3.13'
  testCompile 'junit:junit:4.12'
  testCompile 'org.scalatest:scalatest_2.12:3.0.4'
  testCompile 'org.jvnet.mock-javamail:mock-javamail:1.9'
}

def gensrcDir = "$buildDir/gensrc/scala"

sourceSets {
  generated {
    scala.srcDir gensrcDir
    compileClasspath = configurations.generatedCompile
  }
  main {
    compileClasspath += sourceSets.generated.output
  }
  test {
    compileClasspath += sourceSets.generated.output
  }
}

docker {
  name 'sdkman/sdkman-website'
  tags version as String, 'latest'
  dockerfile file('Dockerfile')
  files tasks.shadowJar.outputs
  dependsOn shadowJar
}

def compileTemplate(File template, File sourceDir, File gensrcDir) {
  TwirlCompiler.compile(
          template,
          file(sourceDir),
          file(gensrcDir),
          "play.twirl.api.HtmlFormat",
          ["io.sdkman.repos.Candidate", "play.twirl.api.Html"],
          new ArrayList<String>())
}

task prepareTemplates() {
  doLast {
    def sourceDir = file("src/main/twirl")
    ["", "includes/"].each { folder ->
      file("$sourceDir/$folder").listFiles().findAll { !it.directory }.each { File template ->
        println("Compiling template: ${template.name}: $sourceDir/$folder -> $gensrcDir/")
        compileTemplate(template, file("$sourceDir/$folder"), file(gensrcDir))
      }
    }
  }
}

compileGeneratedScala {
  dependsOn(prepareTemplates)
  classpath = configurations.compile
}

compileScala {
  dependsOn(compileGeneratedScala)
  source += sourceSets.generated.scala
}

